description = 'simple RESTful application with memory cache (hazelcast)'

ext{
    gradleVersion = '3.4.1'
    javaVersion = '1.8.0_73'
    projectIds = ['group': 'ua.golovchenko.artem.webserver', 'version': '1.0.1-SNAPSHOT']
    jacocoVersion = '0.7.9'
    LogbackVersion = '1.2.3'
    hazelcastVersion =  '3.8.4'
    HttpServerVersion = '20070405'
}

version = projectIds.version


configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        //failOnVersionConflict()
        resolutionStrategy.preferProjectModules()
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'project-report'
ext{
    slf4jVersion =  '1.7.25'
}

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    group = projectIds.group

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies{
        /*compile project(':config')*/
/*        compile project(':root')*/
        compile group: 'org.jacoco', name: 'org.jacoco.agent', version: "$jacocoVersion"
        runtime group: 'ch.qos.logback', name: 'logback-core', version: "$LogbackVersion"
        compile group: 'ch.qos.logback', name: 'logback-classic', version: "$LogbackVersion"
        runtime "org.slf4j:slf4j-api:$slf4jVersion"
    }
    
}


subprojects{

    apply plugin: 'java'
    apply plugin: "jacoco"

    ext{
        junitVersion = '4.12'
        LogbackVersion = '1.2.3'
        slf4jVersion =  '1.5.8'
    }

    repositories {
        mavenCentral()
        //jcenter()
    }

    dependencies {
        //testCompile "junit:junit:$junitVersion"
		//testImplementation 'junit:junit:4.12'
		testImplementation 'junit:junit:4.12'
        //runtime group: 'ch.qos.logback', name: 'logback-core', version: "$LogbackVersion"
        //compile group: 'ch.qos.logback', name: 'logback-classic', "$LogbackVersion"
      /*  compile 'ch.qos.logback:logback-classic:$LogbackVersion'
        runtime "org.slf4j:slf4j-api:$slf4jVersion"*/
    }



/* Addition settings for testing in footer
	Example
	--------------------------------------------------------------------
	|  Results: SUCCESS (1 tests, 1 successes, 0 failures, 0 skipped)  |
	--------------------------------------------------------------------
	*/
    tasks.withType(Test) {
        group ='testing'
        description= 'show addition information after all tests'

        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
            showStandardStreams = true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }


        }
    }

/*    task wrapper(type: Wrapper) {
        gradleVersion = $gradleVersion
    }*/

/*    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**//*MyTest.class',])
            })
        }
    }

    jacocoTestReport.dependsOn(test)
    test.finalizedBy(project.tasks.jacocoTestReport)
    build.dependsOn(jacocoTestReport)*/

    jacoco {
        toolVersion = "$jacocoVersion"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    //source https://gist.github.com/uarun/4375219
    /*    configurations.all {
            resolutionStrategy {
                failOnVersionConflict()
            }
        }*/

}
project('root'){
    version = '1.0.0-SNAPSHOT'
    description = 'Root Project'

    dependencies{
        compile project(':web-api')
        compile project(':cache-server')
        compile project(':config')
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
        compile group: 'com.hazelcast', name: 'hazelcast-all', version: "$hazelcastVersion"
    }
}


project('dao'){
    version = '1.0.0-SNAPSHOT'
    description = 'Data Access Object'

    dependencies{
        compile project(':models')
        compile project(':config')
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
        compile group: 'com.hazelcast', name: 'hazelcast-client', version: "$hazelcastVersion"
    }
}

project('service'){
    version = '1.0.0-SNAPSHOT'
    description = 'Service layer'

    dependencies{
        compile project(':dao')
        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.26-b09'
        compile group: 'com.hazelcast', name: 'hazelcast', version: "$hazelcastVersion"
        //compile project(':config')
        //compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
    }
}



project('web-api'){
    version = '1.0.0-SNAPSHOT'
    description = 'Web-API'

    dependencies{
       compile project(':models')
       compile project(':service')
       compile project(':dao')
       compile project(':cache-server')
       compile project(':config')
       testCompile group: 'com.sun.net.httpserver', name: 'http', version: "$HttpServerVersion"
       compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'


       compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jdk-http', version: '2.26-b09'
       compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.26-b09'
       compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.26-b09'
       //compile group: 'com.networknt', name: 'json-schema-validator', version: '0.1.7'
       compile group: 'org.everit.json', name: 'org.everit.json.schema', version: '1.5.1'
       compile group: 'org.json', name: 'json', version: '20170516'


/*
        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jdk-http', version: '2.4'
        compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.4.1'
        compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.26-b09'

*/

    }


    jar {
        manifest {
            attributes 'Implementation-Title': "$description",
                    'Implementation-Version': "$version",
                    'Main-Class': "ua.golovchenko.artem.game.web.Main"
        }
    }

    task JarWithDependencies(type: Jar) {
        manifest {
            attributes 'Implementation-Title': "$description",
                    'Implementation-Version': "$version",
                    'Main-Class': "ua.golovchenko.artem.game.web.Main"
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

}

project('cache-server'){
    version = '1.0.0-SNAPSHOT'
    description = 'Cache Server'

    dependencies{
        compile project(':models')
        compile project(':dao')
        compile project(':service')
        compile project(':config')
        compile group: 'com.hazelcast', name: 'hazelcast', version: "$hazelcastVersion"
    }

    jar {
        manifest {
            attributes 'Implementation-Title': "$description",
                    'Implementation-Version': "$version",
                    'Main-Class': "ua.golovchenko.artem.game.cache.Main"
        }
    }

    task JarWithDependencies(type: Jar) {
        manifest {
            attributes 'Implementation-Title': "$description",
                    'Implementation-Version': "$version",
                    'Main-Class': "ua.golovchenko.artem.game.cache.Main"
        }
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
}


